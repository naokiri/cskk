name: Test
on: push

jobs:
  lint:
    name: lint and format check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install cargo
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: clippy
          override: true
      - name: Format check
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check
      - name: Lint check
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: -- -D warnings -A dead_code -A improper_ctypes_definitions
  rust_test:
    name: cargo test
    strategy:
      matrix:
        channel: [ stable, nightly, beta ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install required libs (Ubuntu)
        run: sudo apt-get install libxkbcommon-dev
      - name: Install cargo
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.channel }}
          profile: minimal
          override: true
      - name: Run rust test
        uses: actions-rs/cargo@v1
        with:
          command: test
  library_test:
    name: library test
    strategy:
      matrix:
        os: [ ubuntu-latest, macOS-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@master
      - name: Install cargo
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
          key: ${{ runner.os }}-cargo-libtest-v2-${{ hashFiles('**/Cargo.lock') }}
      - name: Install cbindgen
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cbindgen
      - name: Install cargo-c
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-c
      - name: Install required libs (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install libxkbcommon-dev
      - name: Install required libs (MacOS)
        if: matrix.os == 'macOS-latest'
        run: |
          brew install --cask xquartz
          brew install libxkbcommon
      - name: Build library
        uses: actions-rs/cargo@v1
        with:
          command: cbuild
      - name: copy shared data
        run: mkdir -p ~/.local/share/libcskk && cp -r ./shared/* ~/.local/share/libcskk
      # TODO: Use variable in github actions? Only target directory is different here.
      - name: copy header file (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: cp ./target/x86_64-unknown-linux-gnu/debug/libcskk.h ./tests/
      - name: Build lib test (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: gcc ./tests/c_shared_lib_test.c -L ./target/x86_64-unknown-linux-gnu/debug/ -lcskk -o ./tests/lib_test
      - name: Run lib test (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: LD_LIBRARY_PATH=./target/x86_64-unknown-linux-gnu/debug ./tests/lib_test
      - name: copy header file (MacOS)
        if: matrix.os == 'macOS-latest'
        run: cp ./target/x86_64-apple-darwin/debug/libcskk.h ./tests/
      - name: Build lib test (MacOS)
        if: matrix.os == 'macOS-latest'
        run: gcc ./tests/c_shared_lib_test.c -L ./target/x86_64-apple-darwin/debug/ -lcskk -o ./tests/lib_test
      - name: Run lib test (MacOS)
        if: matrix.os == 'macOS-latest'
        run: DYLD_LIBRARY_PATH=./target/x86_64-apple-darwin/debug/ ./tests/lib_test
        
